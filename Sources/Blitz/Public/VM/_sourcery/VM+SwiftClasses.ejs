<%_ include(argument.common_templates_path + "GenericsDepth.ejs") _%>
extension VM {
    @discardableResult
    public func defineClass0<T>
                            (selector rawSelector: String = "\(String(describing: T.self))()",
                             initializer: @escaping () -> T) -> AnyTypeDelegate<T> {
            defineGlobalFunc0(selector: rawSelector, func: initializer)
            return continueDefiningClass(T.self)
    }

<%
    depth_range = Array.from({length: generics_depth + 1}, (x, i) => i).map(x => Number(x));

    for (depth of depth_range) {
        if (depth == 0) { continue; }

        indices = Array.from({length: depth }, (x, i) => i);

        num_args = depth

        generic_parameters = indices.map(x => "P" + x).join(", ")
        default_selector_signature = indices.map(x => "_:").join("")
_%>
    @discardableResult
    public func defineClass<%= num_args %><T, <%= generic_parameters %>>
                            (selector rawSelector: String = "\(String(describing: T.self))(<%= default_selector_signature %>)",
                             initializer: @escaping (<%= generic_parameters %>) -> T) -> AnyTypeDelegate<T> {
            defineGlobalFunc<%= num_args %>(selector: rawSelector, func: initializer)
            return continueDefiningClass(T.self)
    }

<% } _%>
    private func continueDefiningClass<T>(_ type: T.Type) -> AnyTypeDelegate<T> {
        let delegate = DefaultTypeDelegate<T>()
        typeDelegates.registerTypeDelegate(delegate)
        return .init(delegate)
    }
}
