<%_ include(argument.common_templates_path + "GenericsDepth.ejs") _%>
extension VM {
    public func defineGlobalFunc0<R>
                                 (selector rawSelector: String,
                                  `func`: @escaping () -> R) {
        guard let selector = Selector(rawValue: rawSelector) else {
            preconditionFailure("invalid selector: '\(rawSelector)'")
        }

        let selectorArgumentsCount = selector.signature.components.count

        guard selectorArgumentsCount == 0 else {
            preconditionFailure(
                """
                invalid number of arguments: expected 0 arguments
                in selector '\(selector)', got: \(selectorArgumentsCount)
                """
            )
        }

        defineGlobal(
            named: selector.name,
            value: AnyCallable(signature: .void, { _, _, _ in
                .init(`func`())
            })
        )
    }

<%_
    depth_range = Array.from({length: generics_depth}, (x, i) => i).map(x => Number(x));

    for (depth of depth_range) {
      indices = Array.from({length: depth + 1}, (x, i) => i);

      num_args = depth + 1

      generic_parameters = indices.map(x => "P" + x).join(", ")
      typecheck_arguments = indices.map(x => "P" + x + ".self").join(", ")
      closure_arguments = indices.map(x => "$" + x).join(", ")
_%>
    public func defineGlobalFunc<%= num_args %><<%= generic_parameters %>, R>
                                 (selector rawSelector: String,
                                  `func`: @escaping (<%= generic_parameters %>) -> R) {
        guard let selector = Selector(rawValue: rawSelector) else {
            preconditionFailure("invalid selector: '\(rawSelector)'")
        }

        let selectorArgumentsCount = selector.signature.components.count

        guard selectorArgumentsCount == <%= num_args %> else {
            preconditionFailure(
                """
                invalid number of arguments: expected <%= num_args %> arguments
                in selector '\(selector)', got: \(selectorArgumentsCount)
                """
            )
        }

        defineGlobal(
            named: selector.name,
            value: AnyCallable(signature: selector.signature, { _, _, args in
                return try typecheck(args, <%= typecheck_arguments %>) {
                    .init(`func`(<%= closure_arguments %>))
                }
            })
        )
    }

<% } _%>
}
