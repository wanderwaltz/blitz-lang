extension VM {
    public func defineClass0<T>(initializer: @escaping () -> T,
                                with block: (AnyTypeDelegate<T>) -> Void) throws {
        try defineGlobalFunc0(named: String(describing: T.self), func: initializer)
        continueDefiningClass(with: block)
    }

<%
    depth_range = Array.from({length: argument.generics_depth + 1}, (x, i) => i).map(x => Number(x));

    for (depth of depth_range) {
        if (depth == 0) { continue; }

        indices = Array.from({length: depth }, (x, i) => i);

        num_args = depth

        generic_parameters = indices.map(x => "P" + x).join(", ")
_%>
    public func defineClass<%= num_args %><T, <%= generic_parameters %>>(initializer: @escaping (<%= generic_parameters %>) -> T, with block: (AnyTypeDelegate<T>) -> Void) throws {
        try defineGlobalFunc<%= num_args %>(named: String(describing: T.self), func: initializer)
        continueDefiningClass(with: block)
    }

<% } _%>
    private func continueDefiningClass<T>(with block: (AnyTypeDelegate<T>) -> Void) {
        typeDelegates.withDelegate(for: T.self, do: block)
    }
}
