extension VM {
    @discardableResult
    public func defineClass0<T>(initializer: @escaping () -> T) throws -> AnyTypeDelegate<T> {
        try defineGlobalFunc0(named: String(describing: T.self), func: initializer)
        return continueDefiningClass(T.self)
    }

<%
    depth_range = Array.from({length: argument.generics_depth + 1}, (x, i) => i).map(x => Number(x));

    for (depth of depth_range) {
        if (depth == 0) { continue; }

        indices = Array.from({length: depth }, (x, i) => i);

        num_args = depth

        generic_parameters = indices.map(x => "P" + x).join(", ")
_%>
    @discardableResult
    public func defineClass<%= num_args %><T, <%= generic_parameters %>>(initializer: @escaping (<%= generic_parameters %>) -> T) throws -> AnyTypeDelegate<T> {
        try defineGlobalFunc<%= num_args %>(named: String(describing: T.self), func: initializer)
        return continueDefiningClass(T.self)
    }

<% } _%>
    private func continueDefiningClass<T>(_ type: T.Type) -> AnyTypeDelegate<T> {
        let delegate = DefaultTypeDelegate<T>()
        typeDelegates.registerTypeDelegate(delegate)
        return .init(delegate)
    }
}
