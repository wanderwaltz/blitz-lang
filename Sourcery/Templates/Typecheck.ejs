/// Type-checking a single value
func typecheck<T, R>
              (_ value: Value, _ type: T.Type,
               _ block: (T) throws -> R) throws -> R {
    if let convertible = T.self as? ReverseValueConvertible.Type,
       let v = convertible.fromVoltValue(value) as? T {
           return try block(v)
    }

    guard let v = typecast<T>.any(value.any) else {
        throw RuntimeError(
            code: .typeError,
            message: "type error: expected \(String(describing: T.self)), got: \(value.typeName)"
        )
    }

    return try block(v)
}

func typecheck<T0, R>
              (_ args: [Value],
               _ type0: T0.Type,
               _ block: (T0) throws -> R) throws -> R {
    guard args.count == 1 else {
        throw RuntimeError(
            code: .invalidNumberOfArguments,
            message: "invalid number of arguments: expected 1, got: \(args.count)"
        )
    }

    return try typecheck(args[0], type0, block)
}

<%_
    depth_range = Array.from({length: argument.generics_depth}, (x, i) => i);

    for (depth of depth_range) {
      if (depth == 0) { continue; }

      indices = Array.from({length: depth + 1}, (x, i) => i);
      indices1 = Array.from({length: depth }, (x, i) => i);

      args_count = indices.length
      generic_parameters = indices.map(x => "T" + x).join(", ")
      type_arguments_singature = indices.map(x => "_ type" + x + ": T" + x + ".Type").join(",\n               ")
      block_arguments_signature = indices.map(x => "T" + x).join(", ")

      super_arguments_array = indices1.map(x => "args[" + x + "]").join(", ")
      super_type_arguments = indices1.map(x => "type" + x).join(", ")
      super_closure_arguments = indices1.map(x => "a" + x).join(", ")
_%>
func typecheck<<%= generic_parameters %>, R>
              (_ args: [Value],
               <%= type_arguments_singature %>,
               _ block: (<%= block_arguments_signature %>) throws -> R) throws -> R {
    guard args.count == <%= args_count %> else {
        throw RuntimeError(
            code: .invalidNumberOfArguments,
            message: "invalid number of arguments: expected <%= args_count %>, got: \(args.count)"
        )
    }

    let subargs = [<%= super_arguments_array %>]

    return try typecheck(subargs, <%= super_type_arguments %>, { <%= super_closure_arguments %> in
        try typecheck(args[<%= depth %>], type<%= depth %>) { a<%= depth %> in
            try block(<%= super_closure_arguments %>, a<%= depth %>)
        }
    })
}
<% } %>
