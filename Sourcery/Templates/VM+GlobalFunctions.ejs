extension VM {
    public func defineGlobalFunc0<R>(named name: String, `func`: @escaping () -> R) throws {
        try defineGlobal(
            named: name,
            value: AnyCallable({ _, _, _ in
                .init(`func`())
            })
            .checkingArity(0)
        )
    }

<%_
    depth_range = Array.from({length: argument.generics_depth}, (x, i) => i).map(x => Number(x));

    for (depth of depth_range) {
      indices = Array.from({length: depth + 1}, (x, i) => i);

      num_args = depth + 1

      generic_parameters = indices.map(x => "P" + x).join(", ")
      typecheck_arguments = indices.map(x => "P" + x + ".self").join(", ")
      closure_arguments = indices.map(x => "$" + x).join(", ")
_%>
    public func defineGlobalFunc<%= num_args %><<%= generic_parameters %>, R>(named name: String, `func`: @escaping (<%= generic_parameters %>) -> R) throws {
        try defineGlobal(
            named: name,
            value: AnyCallable({ _, _, args in
                return try typecheck(args, <%= typecheck_arguments %>) {
                    .init(`func`(<%= closure_arguments %>))
                }
            })
        )
    }

<% } _%>
}
