import XCTest
@testable import Volt

<% include("KnownIntegerTypes.ejs") _%>
<%_
    for (type in integer_types) {

        type_lowercase = type.toLowerCase()
        examples = integer_types[type]

        if (type[0] != "U") {
            examples = examples.concat(examples.map(x => -x))
        }
_%>
// MARK: - <%= type %>
final class <%= type _%>ReverseValueConvertibleTests: XCTestCase {
    func test_<%= type_lowercase %>_to_value() {
        validate_<%= type_lowercase %>_reverse_convertible(0)
        <%_ for (example of examples) { _%>
        validate_<%= type_lowercase %>_reverse_convertible(<%= example %>)
        <%_ } _%>
    }

    private func validate_<%= type_lowercase %>_reverse_convertible(_ <%= type_lowercase %>: <%= type %>, file: StaticString = #file, line: UInt = #line) {
        let value = Value.number(Number(<%= type_lowercase %>))
        let reverse_any = <%= type %>.fromVoltValue(value)
        XCTAssertEqual(<%= type_lowercase %>, typecast<<%= type %>>.any(reverse_any), file: file, line: line)
    }
}



<% } _%>
